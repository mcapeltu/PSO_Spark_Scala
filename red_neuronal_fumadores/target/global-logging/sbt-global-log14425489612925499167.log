[debug] > Exec(early(addDefaultCommands), None, None)
[debug] > Exec(addDefaultCommands, None, None)
[debug] > Exec(early(initialize), None, None)
[debug] > Exec(initialize, None, None)
[debug] > Exec(early(addPluginSbtFile="""C:\Users\Usuario\AppData\Local\Temp\idea2.sbt"""), None, None)
[debug] > Exec(addPluginSbtFile="""C:\Users\Usuario\AppData\Local\Temp\idea2.sbt""", None, None)
[debug] > Exec(boot, None, None)
[debug] > Exec(writeSbtVersion, None, None)
[debug] > Exec(reload, None, None)
[debug] > Exec(sbtStashOnFailure, None, None)
[debug] > Exec(onFailure loadFailed, None, None)
[debug] > Exec(loadp, None, None)
[info] welcome to sbt 1.9.6 (Oracle Corporation Java 11.0.9)
[debug] Load.defaultLoad until apply took 63.4852ms
[debug]           Load.loadUnit: plugins took 48.9253ms
[debug]           Load.loadUnit: defsScala took 0.1927ms
[debug] [Loading] Scanning directory G:\software\workspace\red_neuronal_fumadores\project
[debug]             Load.loadUnit: mkEval took 3.6941ms
[debug] [Loading] Found non-root projects 
[debug] [Loading] Done in G:\software\workspace\red_neuronal_fumadores\project, returning: ()
[debug] deducing auto plugins based on known facts Set(Atom(sbt.plugins.CorePlugin)) and clauses Clauses(Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.ScriptedPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.SbtPlugin),Set(Atom(sbt.ScriptedPlugin)))
[debug] Clause(Atom(sbt.plugins.SemanticdbPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JUnitXmlReportPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.MiniDependencyTreePlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.plugins.IvyPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.SemanticdbPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.JUnitXmlReportPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.Giter8TemplatePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.MiniDependencyTreePlugin))))
[debug]   :: deduced result: Matched(sbt.plugins.CorePlugin,sbt.plugins.Giter8TemplatePlugin,sbt.plugins.IvyPlugin,sbt.plugins.JvmPlugin,sbt.plugins.MiniDependencyTreePlugin,sbt.plugins.JUnitXmlReportPlugin,sbt.plugins.SemanticdbPlugin)
[debug] Plugins.deducer#function took 9.0093 ms
[info] loading settings for project red_neuronal_fumadores-build from idea2.sbt ...
[debug]               Load.resolveProject(red_neuronal_fumadores-build) took 28.6732ms
[debug]             Load.loadTransitive: finalizeProject(Project(id red_neuronal_fumadores-build, base: G:\software\workspace\red_neuronal_fumadores\project, plugins: List(<none>))) took 53.0306ms
[debug] [Loading] Done in G:\software\workspace\red_neuronal_fumadores\project, returning: (red_neuronal_fumadores-build)
[debug]           Load.loadUnit: loadedProjectsRaw took 180.1377ms
[debug]           Load.loadUnit: cleanEvalClasses took 3.4922ms
[debug]         Load.loadUnit(file:/G:/software/workspace/red_neuronal_fumadores/project/, ...) took 235.9303ms
[debug]       Load.apply: load took 320.1878ms
[debug]       Load.apply: resolveProjects took 4.0741ms
[debug]       Load.apply: finalTransforms took 33.3216ms
[debug]       Load.apply: config.delegates took 4.7897ms
[debug]       Load.apply: Def.make(settings)... took 260.2258ms
[debug]       Load.apply: structureIndex took 61.636ms
[debug]       Load.apply: mkStreams took 1.3099ms
[info] loading project definition from G:\software\workspace\red_neuronal_fumadores\project
[debug] Running task... Cancel: Signal, check cycles: false, forcegc: true
[debug]     Load.loadUnit: plugins took 1738.263ms
[debug]     Load.loadUnit: defsScala took 0.0018ms
[debug] [Loading] Scanning directory G:\software\workspace\red_neuronal_fumadores
[debug]       Load.loadUnit: mkEval took 0.136ms
[debug] [Loading] Found root project root w/ remaining 
[debug] deducing auto plugins based on known facts Set(Atom(sbt.plugins.CorePlugin)) and clauses Clauses(Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.ScriptedPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.SbtPlugin),Set(Atom(sbt.ScriptedPlugin)))
[debug] Clause(Atom(sbt.plugins.SemanticdbPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JUnitXmlReportPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.MiniDependencyTreePlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(org.jetbrains.sbt.StructurePlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(org.jetbrains.sbt.IdeaShellPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(org.jetbrains.sbt.indices.SbtIntellijIndicesPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.plugins.IvyPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.SemanticdbPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.JUnitXmlReportPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.Giter8TemplatePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.MiniDependencyTreePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(org.jetbrains.sbt.StructurePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(org.jetbrains.sbt.IdeaShellPlugin)))
[debug] Clause(And(Set(Atom(sbt.plugins.CorePlugin), Atom(sbt.plugins.JvmPlugin))),Set(Atom(org.jetbrains.sbt.indices.SbtIntellijIndicesPlugin))))
[debug]   :: deduced result: Matched(sbt.plugins.CorePlugin,sbt.plugins.Giter8TemplatePlugin,sbt.plugins.IvyPlugin,sbt.plugins.JvmPlugin,sbt.plugins.SemanticdbPlugin,org.jetbrains.sbt.indices.SbtIntellijIndicesPlugin,sbt.plugins.JUnitXmlReportPlugin,org.jetbrains.sbt.IdeaShellPlugin,org.jetbrains.sbt.StructurePlugin,sbt.plugins.MiniDependencyTreePlugin)
[debug] Plugins.deducer#function took 1.2925 ms
[info] loading settings for project root from build.sbt ...
[debug]         Load.resolveProject(root) took 14.627ms
[debug]       Load.loadTransitive: finalizeProject(Project(id root, base: G:\software\workspace\red_neuronal_fumadores, plugins: List(<none>))) took 16.8189ms
[debug] [Loading] Done in G:\software\workspace\red_neuronal_fumadores, returning: (root)
[debug]     Load.loadUnit: loadedProjectsRaw took 2738.0105ms
[debug]     Load.loadUnit: cleanEvalClasses took 10.9597ms
[debug]   Load.loadUnit(file:/G:/software/workspace/red_neuronal_fumadores/, ...) took 4488.0472ms
[debug] Load.apply: load took 4499.7371ms
[debug] Load.apply: resolveProjects took 0.0901ms
[debug] Load.apply: finalTransforms took 19.3743ms
[debug] Load.apply: config.delegates took 0.223ms
[debug] Load.apply: Def.make(settings)... took 72.9316ms
[debug] Load.apply: structureIndex took 23.3326ms
[debug] Load.apply: mkStreams took 0.003ms
[info] set current project to red_neuronal_fumadores (in build file:/G:/software/workspace/red_neuronal_fumadores/)
[debug] > Exec(sbtPopOnFailure, None, None)
[debug] > Exec(resumeFromFailure, None, None)
[debug] > Exec(notifyUsersAboutShell, None, None)
[debug] > Exec(iflast shell, None, None)
[debug] > Exec(; set ideaPort in Global := 55291 ; idea-shell, None, None)
[debug] > Exec(set ideaPort in Global := 55291, None, None)
[info] Defining Global / ideaPort
[info] The new value will be used by Compile / compile, Test / compile
[debug] Defining 
[debug] 	Global / ideaPort
[debug] 
[debug] The new value will be used by 
[debug] 	Compile / compile
[debug] 	Test / compile
[info] Reapplying settings...
[info] set current project to red_neuronal_fumadores (in build file:/G:/software/workspace/red_neuronal_fumadores/)
[debug] > Exec(idea-shell, None, None)
